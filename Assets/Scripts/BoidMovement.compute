#pragma kernel cs_main
#include <UnityShaderVariables.cginc>

struct boid_data  // This must match the BoidData struct on the C# side
{
    float2 pos;   // Boid position
    float angle;  // Boid direction as an angle (in radians)
    float size;   // Precomputed boid size
};

RWStructuredBuffer<boid_data> data;

// Some constant data from C# side
float left_bound;
float right_bound;
float top_bound;
float bottom_bound;
int boid_count;
float boid_speed;
float deltaTime;

[numthreads(128, 1, 1)]
void cs_main(uint3 id : SV_DispatchThreadID)
{
    const int index = id.x;
    
    // Retrieve boid data once and store it in local variables
    boid_data boid = data[index];
    
    // Recalculate the direction vector using the angle
    // The y component should use cos and the x component should use sin
    float2 dir = float2(cos(boid.angle), sin(boid.angle));
    
    // Calculate the new position
    float2 newPos = boid.pos + dir * boid_speed * deltaTime;
    
    // Wrap around the bounds
    if (newPos.x < left_bound) newPos.x = right_bound;
    if (newPos.x > right_bound) newPos.x = left_bound;
    if (newPos.y < bottom_bound) newPos.y = top_bound;
    if (newPos.y > top_bound) newPos.y = bottom_bound;
    
    // Update the boid's position back to the buffer
    boid.pos = newPos;
    
    // Write back the data only once
    data[index] = boid;
}
