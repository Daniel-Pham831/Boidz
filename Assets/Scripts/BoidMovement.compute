#pragma kernel cs_main

#define MAX_INDEX_STORE_IN_SPATIAL 256
#pragma target 4.5

#include <UnityShaderVariables.cginc>

// Some constant data from C# side
float left_bound;
float right_bound;
float top_bound;
float bottom_bound;
int boid_count;
float boid_speed;
float deltaTime;

float alignment_weight;
float separation_weight;
float cohesion_weight;

float boid_radius;

struct boid_data
{
    float2 position;
    float rotationInRad; // in degrees
};

struct spatial_data
{
    int startIndex;
    int count;

    uint containIndices[MAX_INDEX_STORE_IN_SPATIAL];
};

RWStructuredBuffer<boid_data> data;
RWStructuredBuffer<spatial_data> spatialData;


float Hash21(float2 p) {
    p = frac(p * 0.3183099 + 0.1);
    p *= 17.0;
    return frac(p.x * p.y * (p.x + p.y));
}

float Random(float seed) {
    return frac(sin(seed) * 43758.5453123);
}

float RandomInRange(float seed, float x, float y) {
    const float randomValue = Random(seed); // Get a random value between 0 and 1
    return lerp(x, y, randomValue);   // Scale and offset it to the range [x, y]
}

float2 normalize_ver2(uint id ,float2 v)
{
    float len = length(v);
    if (len == 0)
    {
        v = float2(Random(id), Random(id));
        len = length(v);
    }
    
    return v / len;
}

void get_spatial_data_index(const float2 position,inout int index)
{
    const int col = floor((position.x - left_bound) / boid_radius);
    const int row = floor((position.y - bottom_bound) / boid_radius);
    index = row * ceil((right_bound - left_bound) / boid_radius) + col;
}

// implement boid algorithm and find the next direction
void calculate_next_direction(uint id,const float2 thisBoidPosition,inout float2 dir)
{
    float2 accumulateDirectionToOtherBoids = float2(0, 0); // for Separation
    float2 accumulateForwardDirectionOfOtherBoids = float2(0, 0); // for Alignment
    float2 averagePositionOfOtherBoids = float2(0, 0); // for Cohesion

    int numberOfInRangeBoid = 0;

    for (int row = -1;row <= 1;row++)
    {
        for (int col = -1;col <= 1;col++)
        {
            float2 check_position = thisBoidPosition + float2(col, row) * boid_radius;
            if(check_position.x < left_bound || check_position.x > right_bound || check_position.y < bottom_bound || check_position.y > top_bound)
            {
                continue;
            }

            int spatial_index = -1;
            get_spatial_data_index(check_position, spatial_index);

            if(spatial_index == -1)
            {
                return;
            }

            spatial_data spatial = spatialData[spatial_index];
            for(int i = 0; i< spatial.count;i++)
            {
                int correct_index = (i + spatial.startIndex)% uint(MAX_INDEX_STORE_IN_SPATIAL);
                int other_boid_index = spatial.containIndices[correct_index];

                boid_data other_boid_data = data[other_boid_index];
                float2 otherBoidPosition = other_boid_data.position;

                const float2 delta = thisBoidPosition - otherBoidPosition;
                const float distanceSquared = dot(delta, delta);
                const float radiusSquared = boid_radius * boid_radius;

                if (distanceSquared > radiusSquared)
                {
                    continue;
                }

                float2 other_dir = float2(sin(other_boid_data.rotationInRad), cos(other_boid_data.rotationInRad));
                other_dir = normalize_ver2(i,other_dir);

                accumulateDirectionToOtherBoids += thisBoidPosition - otherBoidPosition; // Subtract to move away
                accumulateForwardDirectionOfOtherBoids += other_dir;
                averagePositionOfOtherBoids += otherBoidPosition;
                numberOfInRangeBoid++;
            }
        }
    }
    
    if(numberOfInRangeBoid > 0)
    {
        // Cohesion: Calculate the average position and the direction to that position
        float2 centerOfMass = averagePositionOfOtherBoids / numberOfInRangeBoid;
        float2 cohesionDirection = normalize_ver2(id,centerOfMass - thisBoidPosition) * cohesion_weight;

        // Separation: Move away from the neighbors
        float2 separationDirection = normalize_ver2(id,accumulateDirectionToOtherBoids / numberOfInRangeBoid) * separation_weight;

        // Alignment: Steer towards the average heading of neighbors
        float2 alignmentDirection = normalize_ver2(id,accumulateForwardDirectionOfOtherBoids / numberOfInRangeBoid) * alignment_weight;

        // Combine the three steering behaviors
        dir += cohesionDirection + separationDirection + alignmentDirection;
    }

    dir = normalize_ver2(id,dir);
}

float safe_get_rotation_in_rad(float rotationInRad)
{
    if (isnan(rotationInRad) || isfinite(rotationInRad))
    {
        return RandomInRange(0, 0, 2 * 3.14159265359);
    }
    return rotationInRad;
}

[numthreads(64, 1, 1)]
void cs_main(uint3 id : SV_DispatchThreadID)
{
    boid_data boid_instance_data = data[id.x];
    
    // Convert the rotation from degrees to radians
    // Calculate the direction vector: x = cos(rad), y = sin(rad)
    float2 dir = float2(sin(boid_instance_data.rotationInRad), cos(boid_instance_data.rotationInRad));
    dir = normalize_ver2(id.x,dir);
    
    calculate_next_direction(id.x,boid_instance_data.position, dir);
    
    // move the boid to target position based on the direction vector
    float2 new_pos = boid_instance_data.position + dir * (boid_speed * deltaTime);
    if(new_pos.x < left_bound)
    {
        new_pos.x = right_bound;
    }
    if(new_pos.x > right_bound)
    {
        new_pos.x = left_bound;
    }
    if(new_pos.y < bottom_bound)
    {
        new_pos.y = top_bound;
    }
    if(new_pos.y > top_bound)
    {
        new_pos.y = bottom_bound;
    }
    
    // Update the position and rotationInRad back to the original data
    boid_instance_data.position = new_pos;
    // Calculate the new rotation in radians
    float newRotationInRad = atan2(dir.x, dir.y);
    if (isnan(newRotationInRad) || isfinite(newRotationInRad))
    {
        newRotationInRad = RandomInRange(id.x,0, 2 * 3.14159265359);
    }

    // Normalize the rotation to ensure it is within the range [0, 2Ï€)
    if (newRotationInRad < 0)
    {
        newRotationInRad += 2 * 3.14159265359;
    }
    else if (newRotationInRad >= 2 * 3.14159265359)
    {
        newRotationInRad -= 2 * 3.14159265359;
    }
    boid_instance_data.rotationInRad = newRotationInRad;
    
    // Write the updated boid data back to the buffer
    data[id.x] = boid_instance_data;
}

