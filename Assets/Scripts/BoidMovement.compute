#pragma kernel cs_main
#include <UnityShaderVariables.cginc>

struct boid_data
{
    float2 position;
    float rotationInRad; // in degrees
};

RWStructuredBuffer<boid_data> data;

// Some constant data from C# side
float left_bound;
float right_bound;
float top_bound;
float bottom_bound;
int boid_count;
float boid_speed;
float deltaTime;

[numthreads(64, 1, 1)]
void cs_main(uint3 id : SV_DispatchThreadID)
{
    boid_data boid_instance_data = data[id.x];

    // Convert the rotation from degrees to radians
    // Calculate the direction vector: x = cos(rad), y = sin(rad)
    float2 dir = float2(sin(boid_instance_data.rotationInRad), cos(boid_instance_data.rotationInRad));
    dir = normalize(dir);

    // Calculate the new position
    float2 new_pos = boid_instance_data.position + dir * (boid_speed * deltaTime);

    // Handle wrapping around the bounds
    if(new_pos.x < left_bound)
    {
        new_pos.x = right_bound;
    }

    if(new_pos.x > right_bound)
    {
        new_pos.x = left_bound;
    }

    if(new_pos.y < bottom_bound)
    {
        new_pos.y = top_bound;
    }

    if(new_pos.y > top_bound)
    {
        new_pos.y = bottom_bound;
    }
    
    // Update the boid's position in the buffer
    data[id.x].position = new_pos;
}
